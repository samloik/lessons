
https://codecamp.ru/blog/python-excel-tutorial/

Далее у вас есть цикл for, который гарантирует, что все значения попадают в файл: вы говорите,
что для каждого элемента в диапазоне от 0 до 4 (5 не включительно) вы собираетесь что-то делать.
Вы будете заполнять значения построчно. Для этого вы указываете элемент строки, который появляется в каждом цикле.
Далее у вас есть еще один цикл for, который будет проходить по столбцам вашего листа.
Вы говорите, что для каждой строки на листе, вы будете смотреть на столбцы, которые идут с ним,
и вы будете заполнять значение для каждого столбца в строке. Заполнив все столбцы строки значениями,
вы перейдете к следующей строке, пока не останется строк.


# Initialize a workbook
book = xlwt.Workbook()

# Add a sheet to the workbook
sheet1 = book.add_sheet("Sheet1")

# The data
cols = ["A", "B", "C", "D", "E"]
txt = [0,1,2,3,4]

# Loop over the rows and columns and fill in the values
for num in range(5):
      row = sheet1.row(num)
      for index, col in enumerate(cols):
          value = txt[index] + num
          row.write(index, value)

# Save the result
book.save("test.xls")





https://ru.stackoverflow.com/questions/1077685/keyerror-there-is-no-item-named-xl-sharedstrings-xml-in-the-archive
Столкнулся с такой же проблемой, надеюсь, мой ответ кому-нибудь поможет.

import shutil
from zipfile import ZipFile

# Создаем временную папку
tmp_folder = '/tmp/convert_wrong_excel/'
os.makedirs(tmp_folder, exist_ok=True)

# Распаковываем excel как zip в нашу временную папку
with ZipFile('yourfile.xlsx') as excel_container:
    excel_container.extractall(tmp_folder)

# Переименовываем файл с неверным названием
wrong_file_path = os.path.join(tmp_folder, 'xl', 'SharedStrings.xml')
correct_file_path = os.path.join(tmp_folder, 'xl', 'sharedStrings.xml')
os.rename(wrong_file_path, correct_file_path)

# Запаковываем excel обратно в zip и переименовываем в исходный файл
shutil.make_archive('yourfile', 'zip', tmp_folder)
os.rename('yourfile.zip', 'yourfile.xlsx')




стр.146 Глава 6. Поиск в ширину

А вот окончательная версия кода поиска в ширину, в которой учтено это
обстоятельство:


def search(name):
    search_queue = deque()
    search_queue += graph(name]
    searched = []                          # Этот массив испопьзуется дпя отспеживания уже проверенных пюдей
    while search_queue:
        person = search_queue.popleft()
        if not person in searched:          # Чеповек проверяется топько в том спучае, еспи он не проверяпся ранее
            if person_is_seller(person):
            print person +" is а mango seller!"
            return True
        else:
        search_queue += graph[person]
        searched.append(person)             # Чеповек помечается как уже проверенный
    return False

search("you")




https://stackoverflow.com/questions/23460345/selecting-unique-rows-between-two-dataframes-in-pandas
488 / 5000

Итак, первые два и последний Star_ID являются общими для DF_A и DF_B. Я хотел бы создать DF_C таким образом, чтобы:

Итак, что мы делаем здесь, мы создаем логическую маску, мы спрашиваем,
где значения Star_ID находятся в обоих фреймах данных, однако, используя ~ we NOT условие,
которое фактически отменяет это. Тот, с которым вы связались,
в значительной степени то же самое, но я думаю, вы, возможно, не поняли синтаксис?

df1[~df1.Star_ID.isin(df2.Star_ID)]


Чтобы получить как значения, которые находятся только в df1,
так и значения, которые находятся только в df2, вы можете сделать это


unique_vals = df1[~df1.Star_ID.isin(df2.Star_ID)].append(df2[~df2.Star_ID.isin(df1.Star_ID)], ignore_index=True)




чтение ячеек
https://coderoad.ru/43544514/Pandas-%D1%81%D1%87%D0%B8%D1%82%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D1%8F-%D1%8F%D1%87%D0%B5%D0%B9%D0%BA%D0%B8-Excel-%D0%B2-%D0%BF%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D1%83%D1%8E


    """
    data = {}
    data[0] = df3['item_code'].tolist()
    data[1] = df3['Nomenclature'].tolist()
    #data[2] = df3['Unnamed: 5'].tolist()
    """




"""
информация по методу изменения ширины столбцов
https://coderoad.ru/17326973/%D0%95%D1%81%D1%82%D1%8C-%D0%BB%D0%B8-%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8-%D1%80%D0%B5%D0%B3%D1%83%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D1%88%D0%B8%D1%80%D0%B8%D0%BD%D1%83-%D1%81%D1%82%D0%BE%D0%BB%D0%B1%D1%86%D0%BE%D0%B2-Excel-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E
"""





# добавление столбца сумм по позициям

    # https://overcoder.net/q/558395/%D0%BA%D0%B0%D0%BA-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D1%82%D1%8C-%D1%81%D1%82%D1%80%D0%BE%D0%BA%D1%83-%D1%81%D1%83%D0%BC%D0%BC%D1%8B-%D0%B8-%D1%81%D1%82%D0%BE%D0%BB%D0%B1%D0%B5%D1%86-%D1%81%D1%83%D0%BC%D0%BC%D1%8B-%D0%B2-%D0%BF%D0%B0%D0%BD%D0%B4%D0%B0%D1%85
    df = df2_unique_vals.append({'item_code': 'Total'}, ignore_index=True)

    df.loc['Total','02_Car']= df['02_Car'].sum(axis=0)
    df.loc['Total','04_Victory']= df['04_Victory'].sum(axis=0)
    df.loc['Total','08_Center']= df['08_Center'].sum(axis=0)

    df2_unique_vals = df